{"version":3,"sources":["components/TodoApp/TodoList/TodoItem/TodoItem.js","components/TodoApp/TodoList/TodoList.js","components/TodoApp/TodosFilter/TodosFilter.js","components/TodoApp/Header/Header.js","components/TodoApp/TodoApp.js","api/todos.js","App.js","index.js"],"names":["TodoItem","state","editing","todoEditingValue","props","todo","title","handleKeyDown","event","onSaveEdit","key","setState","prevState","id","onEdit","onInputTodoTitle","value","target","this","onStatus","onRemove","completed","className","cn","type","checked","onChange","htmlFor","onDoubleClick","onClick","onKeyDown","React","Component","TodosList","todos","filter","filteredTodos","map","handleFilter","callFilter","criteria","preventDefault","TodosFilter","activeTodos","onFilter","onRemoveCompleted","href","selected","Header","placeholder","TodoApp","onStatusAll","length","userId","isTodoChanged","App","onUpdate","reduce","counter","getTodosFromApi","todosFromServer","onTodoStatus","onTodoStatusAll","handleSaveEdit","prevProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5098cad1.chunk.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport cn from 'classnames';\n\nexport class TodoItem extends React.Component {\n  state = {\n    editing: false,\n    todoEditingValue: this.props.todo.title,\n  };\n\n  handleKeyDown = (event) => {\n    const {\n      onSaveEdit,\n      todo,\n    } = this.props;\n\n    if (event.key === 'Escape') {\n      this.setState(prevState => ({\n        ...prevState,\n        todoEditingValue: todo.title,\n        editing: false,\n      }));\n    } else if (event.key === 'Enter') {\n      onSaveEdit(this.state.todoEditingValue, todo.id);\n      this.setState(prevState => ({\n        ...prevState,\n        editing: false,\n      }));\n    }\n  };\n\n  onEdit = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      editing: true,\n    }));\n  };\n\n  onInputTodoTitle = (event) => {\n    const { target: { value } } = event;\n\n    this.setState(prevState => ({\n      ...prevState,\n      todoEditingValue: value,\n    }));\n  };\n\n  render() {\n    const {\n      todo,\n      onStatus,\n      onRemove,\n    } = this.props;\n    const {\n      id,\n      title,\n      completed,\n    } = todo;\n\n    return (\n      <li\n        className={cn({ completed }, { editing: this.state.editing })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={id}\n            checked={completed}\n            onChange={() => onStatus(id)}\n          />\n          <label\n            htmlFor={id}\n            onDoubleClick={this.onEdit}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => onRemove(id)}\n          />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={this.state.todoEditingValue}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.onInputTodoTitle}\n        />\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onStatus: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n  onSaveEdit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { TodoItem } from './TodoItem/TodoItem';\n// import cn from 'classnames';\n\nexport const TodosList = (props) => {\n  const {\n    todos,\n    filter,\n    onStatus,\n    onRemove,\n    onSaveEdit,\n  } = props;\n\n  const filteredTodos = todos.filter((todo) => {\n    if (filter === 'active') {\n      return !todo.completed;\n    }\n\n    if (filter === 'completed') {\n      return todo.completed;\n    }\n\n    return true;\n  });\n\n  return (\n    <ul className=\"todo-list\">\n      {filteredTodos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          onStatus={onStatus}\n          onRemove={onRemove}\n          onSaveEdit={onSaveEdit}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodosList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  onStatus: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n  onSaveEdit: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nconst handleFilter = (event, callFilter, criteria) => {\n  event.preventDefault();\n  callFilter(criteria);\n};\n\nexport const TodosFilter = (props) => {\n  const {\n    activeTodos,\n    onFilter,\n    filter,\n    onRemoveCompleted,\n  } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${activeTodos} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={cn({ selected: (filter === 'all') })}\n            onClick={event => handleFilter(event, onFilter, 'all')}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={cn({ selected: (filter === 'active') })}\n            onClick={event => handleFilter(event, onFilter, 'active')}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            className={cn({ selected: (filter === 'completed') })}\n            onClick={event => handleFilter(event, onFilter, 'completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={onRemoveCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nTodosFilter.propTypes = {\n  activeTodos: PropTypes.number.isRequired,\n  onFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n  onRemoveCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nexport const Header = () => (\n  <header className=\"header\">\n    <h1>todos</h1>\n\n    <input\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n    />\n  </header>\n);\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { TodosList } from './TodoList/TodoList';\nimport { TodosFilter } from './TodosFilter/TodosFilter';\nimport { Header } from './Header/Header';\n// import cn from 'classnames';\n\nexport const TodoApp = (props) => {\n  const {\n    todos,\n    activeTodos,\n    filter,\n    onStatus,\n    onRemove,\n    onSaveEdit,\n    onStatusAll,\n    onFilter,\n    onRemoveCompleted,\n  } = props;\n\n  return (\n    <section className=\"todoapp\">\n      <Header />\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={onStatusAll}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <TodosList\n          todos={todos}\n          filter={filter}\n          onStatus={onStatus}\n          onRemove={onRemove}\n          onSaveEdit={onSaveEdit}\n        />\n      </section>\n\n      {\n        todos.length\n          ? (\n            <TodosFilter\n              activeTodos={activeTodos}\n              onFilter={onFilter}\n              filter={filter}\n              onRemoveCompleted={onRemoveCompleted}\n            />\n          )\n          : (null)\n      }\n    </section>\n  );\n};\n\nTodoApp.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  activeTodos: PropTypes.number.isRequired,\n  onStatus: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n  onSaveEdit: PropTypes.func.isRequired,\n  onStatusAll: PropTypes.func.isRequired,\n  onFilter: PropTypes.func.isRequired,\n  onRemoveCompleted: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","const todos = [\n  {\n    userId: 1,\n    id: 1,\n    title: 'delectus aut autem',\n    completed: false,\n  },\n  {\n    userId: 1,\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: true,\n  },\n  {\n    userId: 1,\n    id: 3,\n    title: 'fugiat veniam minus',\n    completed: false,\n  },\n];\n\nexport default todos;\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp/TodoApp';\nimport todosFromServer from './api/todos';\n\nconst isTodoChanged = (todo, id) => {\n  if (todo.id === id) {\n    return {\n      ...todo,\n      completed: !todo.completed,\n    };\n  }\n\n  return todo;\n};\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    filter: 'all',\n    activeTodos: 0,\n  }\n\n  componentDidMount() {\n    this.getTodosFromApi();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.todos !== prevState.todos) {\n      this.onUpdate();\n    }\n  }\n\n  onUpdate = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      activeTodos: prevState.todos\n        .reduce((counter, todo) => (\n          counter + (todo.completed ? 0 : 1)\n        ), 0),\n    }));\n  };\n\n  getTodosFromApi = () => {\n    this.setState({\n      todos: todosFromServer,\n    });\n  };\n\n  onTodoStatus = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos\n        .map(todo => isTodoChanged(todo, id)),\n    }));\n  };\n\n  onTodoStatusAll = (event) => {\n    const { target: { checked } } = event;\n\n    this.setState(prevState => ({\n      todos: prevState.todos\n        .map(todo => (\n          {\n            ...todo,\n            completed: checked,\n          }\n        )),\n    }));\n  };\n\n  onRemove = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos\n        .filter(todo => (todo.id !== id)),\n    }));\n  };\n\n  onFilter = (criteria) => {\n    this.setState(prevState => ({\n      ...prevState,\n      filter: criteria,\n    }));\n  };\n\n  onRemoveCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos\n        .filter(todo => (!todo.completed)),\n    }));\n  };\n\n  handleSaveEdit = (value, id) => {\n    this.setState(prevState => ({\n      ...prevState,\n      todos: prevState.todos\n        .map(todo => (\n          todo.id === id\n            ? ({\n              ...todo,\n              title: value,\n            })\n            : (\n              todo\n            )\n        )),\n    }));\n  };\n\n  render() {\n    const {\n      todos,\n      activeTodos,\n      filter,\n    } = this.state;\n\n    return (\n      <TodoApp\n        todos={todos}\n        activeTodos={activeTodos}\n        filter={filter}\n        onStatus={this.onTodoStatus}\n        onRemove={this.onRemove}\n        onSaveEdit={this.handleSaveEdit}\n        onStatusAll={this.onTodoStatusAll}\n        onFilter={this.onFilter}\n        onRemoveCompleted={this.onRemoveCompleted}\n      />\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}