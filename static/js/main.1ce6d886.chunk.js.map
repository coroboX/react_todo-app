{"version":3,"sources":["components/TodoApp/TodoList/TodoItem/TodoItem.js","components/TodoApp/TodoList/TodoList.js","components/TodoApp/TodosFilter/TodosFilter.js","components/TodoApp/Header/Header.js","components/TodoApp/TodoApp.js","api/todos.js","App.js","index.js"],"names":["handleOnEdit","event","preventDefault","console","log","TodoItem","props","todo","onStatus","onRemove","id","title","completed","className","cn","type","checked","onChange","htmlFor","onDoubleClick","toString","onClick","TodosList","todos","filter","filteredTodos","map","key","handleFilter","callFilter","criteria","TodosFilter","activeTodos","onFilter","onRemoveCompleted","href","selected","Header","placeholder","TodoApp","onStatusAll","userId","isTodoChanged","App","state","onUpdate","setState","prevState","reduce","counter","getTodosFromApi","todosFromServer","onTodoStatus","onTodoStatusAll","target","this","prevProps","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ce6d886.chunk.js","sourcesContent":["import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport cn from 'classnames';\n\nconst handleOnEdit = (event) => {\n  event.preventDefault();\n\n  console.log('fired========');\n};\n\nexport const TodoItem = (props) => {\n  const {\n    todo,\n    onStatus,\n    onRemove,\n  } = props;\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  return (\n    <li\n      className={cn({ completed })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={`todo-${id}`}\n          checked={completed}\n          onChange={() => onStatus(id)}\n        />\n        <label\n          htmlFor={`todo-${id}`}\n          onDoubleClick={handleOnEdit}\n        >\n          {title}\n          {` > ${completed.toString()}`}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => onRemove(id)}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  onStatus: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { TodoItem } from './TodoItem/TodoItem';\n// import cn from 'classnames';\n\nexport const TodosList = (props) => {\n  const {\n    todos,\n    filter,\n    onStatus,\n    onRemove,\n  } = props;\n\n  const filteredTodos = todos.filter((todo) => {\n    if (filter === 'active') {\n      return !todo.completed;\n    }\n\n    if (filter === 'completed') {\n      return todo.completed;\n    }\n\n    return true;\n  });\n\n  return (\n    <ul className=\"todo-list\">\n      {filteredTodos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          onStatus={onStatus}\n          onRemove={onRemove}\n        />\n      ))}\n    </ul>\n  );\n};\n\nTodosList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  onStatus: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nconst handleFilter = (event, callFilter, criteria) => {\n  event.preventDefault();\n  callFilter(criteria);\n};\n\nexport const TodosFilter = (props) => {\n  const {\n    activeTodos,\n    onFilter,\n    filter,\n    onRemoveCompleted,\n  } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {`${activeTodos} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={cn({ selected: (filter === 'all') })}\n            onClick={event => handleFilter(event, onFilter, 'all')}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={cn({ selected: (filter === 'active') })}\n            onClick={event => handleFilter(event, onFilter, 'active')}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            className={cn({ selected: (filter === 'completed') })}\n            onClick={event => handleFilter(event, onFilter, 'completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={onRemoveCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nTodosFilter.propTypes = {\n  activeTodos: PropTypes.number.isRequired,\n  onFilter: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n  onRemoveCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nexport const Header = () => (\n  <header className=\"header\">\n    <h1>todos</h1>\n\n    <input\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n    />\n  </header>\n);\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { TodosList } from './TodoList/TodoList';\nimport { TodosFilter } from './TodosFilter/TodosFilter';\nimport { Header } from './Header/Header';\n// import cn from 'classnames';\n\nexport const TodoApp = (props) => {\n  const {\n    todos,\n    activeTodos,\n    filter,\n    onStatus,\n    onRemove,\n    onStatusAll,\n    onFilter,\n    onRemoveCompleted,\n  } = props;\n\n  return (\n    <section className=\"todoapp\">\n      <Header />\n\n      <section className=\"main\">\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={onStatusAll}\n        />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <TodosList\n          todos={todos}\n          filter={filter}\n          onStatus={onStatus}\n          onRemove={onRemove}\n        />\n      </section>\n\n      <TodosFilter\n        activeTodos={activeTodos}\n        onFilter={onFilter}\n        filter={filter}\n        onRemoveCompleted={onRemoveCompleted}\n      />\n    </section>\n  );\n};\n\nTodoApp.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  activeTodos: PropTypes.number.isRequired,\n  onStatus: PropTypes.func.isRequired,\n  onRemove: PropTypes.func.isRequired,\n  onStatusAll: PropTypes.func.isRequired,\n  onFilter: PropTypes.func.isRequired,\n  onRemoveCompleted: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n","const todos = [\n  {\n    userId: 1,\n    id: 1,\n    title: 'delectus aut autem',\n    completed: false,\n  },\n  {\n    userId: 1,\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: true,\n  },\n  {\n    userId: 1,\n    id: 3,\n    title: 'fugiat veniam minus',\n    completed: false,\n  },\n];\n\nexport default todos;\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp/TodoApp';\nimport todosFromServer from './api/todos';\n\nconst isTodoChanged = (todo, id) => {\n  if (todo.id === id) {\n    return {\n      ...todo,\n      completed: !todo.completed,\n    };\n  }\n\n  return todo;\n};\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    filter: 'all',\n    activeTodos: 0,\n  }\n\n  componentDidMount() {\n    this.getTodosFromApi();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.todos !== prevState.todos) {\n      this.onUpdate();\n    }\n  }\n\n  onUpdate = () => {\n    this.setState(prevState => ({\n      ...prevState,\n      activeTodos: prevState.todos\n        .reduce((counter, todo) => (\n          counter + (todo.completed ? 0 : 1)\n        ), 0),\n    }));\n  };\n\n  getTodosFromApi = () => {\n    this.setState({\n      todos: todosFromServer,\n    });\n  };\n\n  onTodoStatus = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos\n        .map(todo => isTodoChanged(todo, id)),\n    }));\n  };\n\n  onTodoStatusAll = (event) => {\n    const { target: { checked } } = event;\n\n    this.setState(prevState => ({\n      todos: prevState.todos\n        .map(todo => (\n          {\n            ...todo,\n            completed: checked,\n          }\n        )),\n    }));\n  };\n\n  onRemove = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos\n        .filter(todo => (todo.id !== id)),\n    }));\n  };\n\n  onFilter = (criteria) => {\n    this.setState(prevState => ({\n      ...prevState,\n      filter: criteria,\n    }));\n  };\n\n  onRemoveCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos\n        .filter(todo => (!todo.completed)),\n    }));\n  };\n\n  render() {\n    const {\n      todos,\n      activeTodos,\n      filter,\n    } = this.state;\n\n    return (\n      <TodoApp\n        todos={todos}\n        activeTodos={activeTodos}\n        filter={filter}\n        onStatus={this.onTodoStatus}\n        onRemove={this.onRemove}\n        onStatusAll={this.onTodoStatusAll}\n        onFilter={this.onFilter}\n        onRemoveCompleted={this.onRemoveCompleted}\n      />\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}